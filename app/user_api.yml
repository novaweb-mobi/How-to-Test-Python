swagger: "2.0"
info:
  description: User API
  version: "1.0.0"
  title: User API
consumes:
  - "application/json"
produces:
  - "application/json"

basePath: "/v1/user"

paths:
  /health:
    get:
      operationId: user_api.probe
      tags:
        - "User"
      summary: "Status check"
      description: "Verifies if the API is ready."
      responses:
        200:
          description: "API ready"
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  available:
                    type: integer
        500:
          description: "API not ready"

  /:
    get:
      operationId: user_api.read
      security:
        - jwt: ['secret']
      tags:
        - "User"
      parameters:
        - name: length
          in: query
          type: integer
          required: false
          description: "Amount of user to select"
        - name: offset
          in: query
          type: integer
          required: false
          description: "Amount of user to skip"
        - name: id_
          in: query
          type: string
          required: false
        - name: creation_datetime
          in: query
          type: string
          required: false
        - name: last_modified_datetime
          in: query
          type: string
          required: false
        - name: name
          in: query
          type: string
          required: false
        - name: email
          in: query
          type: string
          required: false
        - name: birthday
          in: query
          type: string
          required: false
      summary: "Lists all User available"
      description: |
        "Lists all User in the database. May be filtered by all fields."
      responses:
        200:
          description: "Available User"
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  total:
                    type: integer
                  results:
                    type: array
                    properties:
                      entities:
                        type: object
        500:
          description: "An error ocurred"
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  error:
                    type: string
    post:
      operationId: user_api.create
      tags:
        - "User"
      parameters:
        - name: entity
          in: body
          schema:
            type: object
          required: true
          description: "User to add"
      summary: "Create a new User."
      description: |
        "Creates a new User in the database"
      responses:
        201:
          description: "User created"
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  entity:
                    type: object
        500:
          description: "An error ocurred"
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  error:
                    type: string

  /{id_}:
    get:
      operationId: user_api.read_one
      security:
        - jwt: ['secret']
      tags:
        - "User"
      parameters:
        - name: id_
          in: path
          type: string
          required: true
          description: "Id of user to select"
      summary: "Recover user"
      description: |
        "Select user by Id"
      responses:
        201:
          description: "User"
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  entity:
                    type: object
        500:
          description: "An error ocurred"
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  error:
                    type: string
    put:
      operationId: user_api.update
      security:
        - jwt: ['secret']
      tags:
        - "User"
      parameters:
        - name: id_
          in: path
          type: string
          required: true
          description: "Id of user to select"
        - name: entity
          in: body
          schema:
            type: object
          required: true
          description: "User to add"
      summary: "Update User"
      description: |
        "Update User in database."
      responses:
        200:
          description: "User"
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  entity:
                    type: object
        500:
          description: "An error ocurred"
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  error:
                    type: string
    delete:
      operationId: user_api.delete
      security:
        - jwt: ['secret']
      tags:
        - "User"
      parameters:
        - name: id_
          in: path
          type: string
          required: true
          description: "Id of user to select"
      summary: "Delete User"
      description: |
        "Delete User in database."
      responses:
        200:
          description: "User"
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  entity:
                    type: object
        500:
          description: "An error ocurred"
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  error:
                    type: string
    post:
      operationId: user_api.login
      security:
        - jwt: ['secret']
      tags:
        - "User"
      parameters:
        - name: id_
          in: path
          type: string
          required: true
          description: "Id of user to select"
        - name: name
          in: body
          type: string
          required: true
          description: "User to add"
      summary: "Update User"
      description: |
        "Update User in database."
      responses:
        200:
          description: "User"
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  entity:
                    type: object
        500:
          description: "An error ocurred"
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  error:
                    type: string

securityDefinitions:
  jwt:
    type: apiKey
    name: Authorization
    in: header
    x-authentication-scheme: Bearer
    x-bearerInfoFunc: nova_api.auth.decode_jwt_token
